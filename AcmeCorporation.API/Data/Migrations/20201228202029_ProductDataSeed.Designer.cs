// <auto-generated />
using System;
using AcmeCorporation.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AcmeCorporation.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201228202029_ProductDataSeed")]
    partial class ProductDataSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AcmeCorporation.API.Data.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Photos");

                    b.HasData(
                        new
                        {
                            Id = 100,
                            Filename = "Images/3e80db70-f5cc-45b9-b3d8-524d562e1709.jpg",
                            ProductId = 100
                        },
                        new
                        {
                            Id = 101,
                            Filename = "Images/494d2306-f579-46ad-82d2-44f69347db03.jpg",
                            ProductId = 100
                        },
                        new
                        {
                            Id = 102,
                            Filename = "Images/0576cdc7-5aed-4aa4-9bd2-6fdf63cacd23.jpg",
                            ProductId = 100
                        },
                        new
                        {
                            Id = 103,
                            Filename = "Images/4bd66dfa-8e71-4e80-973a-1410261d73b7.jpg",
                            ProductId = 101
                        },
                        new
                        {
                            Id = 104,
                            Filename = "Images/5dab2566-0fce-4529-877a-06be0282e5e0.jpg",
                            ProductId = 101
                        },
                        new
                        {
                            Id = 105,
                            Filename = "Images/57fd5160-7dea-4c2f-b92c-5b76d73ef8c7.jpg",
                            ProductId = 101
                        },
                        new
                        {
                            Id = 110,
                            Filename = "Images/c6eba157-1f8e-4217-a469-a19c4976bb4c.jpg",
                            ProductId = 102
                        },
                        new
                        {
                            Id = 111,
                            Filename = "Images/cc0ab8d6-b9b9-44b2-90e1-f04cb339d1aa.jpg",
                            ProductId = 102
                        });
                });

            modelBuilder.Entity("AcmeCorporation.API.Data.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndingTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("InitialBid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("StartingTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 100,
                            Description = "OnePlus 8 Pro Original, Sealed pack, Global Version, 1 Year Software Warranty Easy payment scheme available for upto 36 months for Credit card holders* • 6.78 inches 3168 x 1440 pixels 513 ppi AMOLED Display • OxygenOS based on Android™ 10",
                            EndingTime = new DateTime(2021, 1, 1, 1, 50, 29, 592, DateTimeKind.Local).AddTicks(1235),
                            InitialBid = 100000m,
                            IsDeleted = false,
                            Name = "ONEPLUS 8 PRO BRANDNEW 12GB RAM 256GB",
                            StartingTime = new DateTime(2020, 12, 29, 1, 50, 29, 592, DateTimeKind.Local).AddTicks(894),
                            Status = 1
                        },
                        new
                        {
                            Id = 101,
                            Description = "Brand New Condition Samsung Galaxy Note 20 Ultra 256/12GB/ Mystic Bronze/ Softlogic Company Warranty Real Pictures of The Device Attached",
                            EndingTime = new DateTime(2020, 12, 30, 1, 50, 29, 592, DateTimeKind.Local).AddTicks(2653),
                            InitialBid = 80000m,
                            IsDeleted = false,
                            Name = "Samsung Galaxy Note 20 Ultra 256GB (Used) 12GB",
                            StartingTime = new DateTime(2020, 12, 29, 1, 50, 29, 592, DateTimeKind.Local).AddTicks(2639),
                            Status = 1
                        },
                        new
                        {
                            Id = 102,
                            Description = "100% condition Usa phone Complete set box available 90% battery health No errors at all 3u tool report",
                            EndingTime = new DateTime(2021, 1, 2, 1, 50, 29, 592, DateTimeKind.Local).AddTicks(2689),
                            InitialBid = 120000m,
                            IsDeleted = false,
                            Name = "Iphone XS Max 128GB (Brandew condition)",
                            StartingTime = new DateTime(2020, 12, 30, 1, 50, 29, 592, DateTimeKind.Local).AddTicks(2687),
                            Status = 1
                        });
                });

            modelBuilder.Entity("AcmeCorporation.API.Data.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId");

                    b.HasKey("TransactionId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("AcmeCorporation.API.Data.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(255);

                    b.Property<int?>("ContactNumber");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired();

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired();

                    b.Property<int>("Role");

                    b.Property<string>("Username")
                        .HasMaxLength(50);

                    b.HasKey("UserId");

                    b.HasIndex("EmailAddress")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 102,
                            EmailAddress = "johnwick@gmail.com",
                            PasswordHash = new byte[] { 34, 148, 242, 17, 180, 20, 28, 163, 28, 193, 179, 155, 122, 92, 224, 236, 131, 255, 59, 22, 96, 228, 253, 156, 129, 115, 234, 210, 250, 127, 29, 124, 171, 206, 159, 7, 187, 72, 75, 134, 174, 83, 146, 42, 180, 55, 98, 200, 228, 30, 56, 76, 114, 3, 209, 30, 218, 238, 75, 78, 54, 143, 105, 221 },
                            PasswordSalt = new byte[] { 221, 128, 78, 251, 154, 250, 224, 219, 92, 158, 248, 98, 197, 43, 87, 46, 246, 156, 200, 138, 59, 164, 138, 17, 101, 42, 245, 216, 18, 178, 130, 56, 222, 29, 168, 195, 144, 86, 10, 49, 103, 237, 228, 106, 8, 240, 68, 157, 200, 131, 99, 72, 255, 85, 54, 95, 176, 151, 164, 242, 72, 41, 234, 81, 126, 251, 145, 101, 130, 102, 23, 220, 49, 25, 180, 230, 215, 121, 237, 7, 249, 123, 101, 226, 126, 15, 18, 16, 27, 8, 157, 20, 30, 217, 185, 201, 49, 167, 45, 168, 224, 51, 48, 200, 4, 183, 242, 171, 29, 96, 151, 204, 122, 90, 28, 145, 98, 1, 37, 91, 5, 45, 173, 77, 236, 7, 51, 162 },
                            Role = 1,
                            Username = "John Wick"
                        },
                        new
                        {
                            UserId = 101,
                            EmailAddress = "paterpark@gmail.com",
                            PasswordHash = new byte[] { 34, 148, 242, 17, 180, 20, 28, 163, 28, 193, 179, 155, 122, 92, 224, 236, 131, 255, 59, 22, 96, 228, 253, 156, 129, 115, 234, 210, 250, 127, 29, 124, 171, 206, 159, 7, 187, 72, 75, 134, 174, 83, 146, 42, 180, 55, 98, 200, 228, 30, 56, 76, 114, 3, 209, 30, 218, 238, 75, 78, 54, 143, 105, 221 },
                            PasswordSalt = new byte[] { 221, 128, 78, 251, 154, 250, 224, 219, 92, 158, 248, 98, 197, 43, 87, 46, 246, 156, 200, 138, 59, 164, 138, 17, 101, 42, 245, 216, 18, 178, 130, 56, 222, 29, 168, 195, 144, 86, 10, 49, 103, 237, 228, 106, 8, 240, 68, 157, 200, 131, 99, 72, 255, 85, 54, 95, 176, 151, 164, 242, 72, 41, 234, 81, 126, 251, 145, 101, 130, 102, 23, 220, 49, 25, 180, 230, 215, 121, 237, 7, 249, 123, 101, 226, 126, 15, 18, 16, 27, 8, 157, 20, 30, 217, 185, 201, 49, 167, 45, 168, 224, 51, 48, 200, 4, 183, 242, 171, 29, 96, 151, 204, 122, 90, 28, 145, 98, 1, 37, 91, 5, 45, 173, 77, 236, 7, 51, 162 },
                            Role = 2,
                            Username = "Peter Park"
                        },
                        new
                        {
                            UserId = 100,
                            EmailAddress = "jason@gmail.com",
                            PasswordHash = new byte[] { 34, 148, 242, 17, 180, 20, 28, 163, 28, 193, 179, 155, 122, 92, 224, 236, 131, 255, 59, 22, 96, 228, 253, 156, 129, 115, 234, 210, 250, 127, 29, 124, 171, 206, 159, 7, 187, 72, 75, 134, 174, 83, 146, 42, 180, 55, 98, 200, 228, 30, 56, 76, 114, 3, 209, 30, 218, 238, 75, 78, 54, 143, 105, 221 },
                            PasswordSalt = new byte[] { 221, 128, 78, 251, 154, 250, 224, 219, 92, 158, 248, 98, 197, 43, 87, 46, 246, 156, 200, 138, 59, 164, 138, 17, 101, 42, 245, 216, 18, 178, 130, 56, 222, 29, 168, 195, 144, 86, 10, 49, 103, 237, 228, 106, 8, 240, 68, 157, 200, 131, 99, 72, 255, 85, 54, 95, 176, 151, 164, 242, 72, 41, 234, 81, 126, 251, 145, 101, 130, 102, 23, 220, 49, 25, 180, 230, 215, 121, 237, 7, 249, 123, 101, 226, 126, 15, 18, 16, 27, 8, 157, 20, 30, 217, 185, 201, 49, 167, 45, 168, 224, 51, 48, 200, 4, 183, 242, 171, 29, 96, 151, 204, 122, 90, 28, 145, 98, 1, 37, 91, 5, 45, 173, 77, 236, 7, 51, 162 },
                            Role = 2,
                            Username = "Jason Statham"
                        });
                });

            modelBuilder.Entity("AcmeCorporation.API.Data.Models.Photo", b =>
                {
                    b.HasOne("AcmeCorporation.API.Data.Models.Product", "Product")
                        .WithMany("Photos")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AcmeCorporation.API.Data.Models.Transaction", b =>
                {
                    b.HasOne("AcmeCorporation.API.Data.Models.Product", "Product")
                        .WithMany("Transactions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AcmeCorporation.API.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
