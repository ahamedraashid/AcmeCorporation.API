// <auto-generated />
using System;
using AcmeCorporation.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AcmeCorporation.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201228193123_SeedData")]
    partial class SeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AcmeCorporation.API.Data.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int?>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("AcmeCorporation.API.Data.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndingTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("InitialBid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("StartingTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("AcmeCorporation.API.Data.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId");

                    b.HasKey("TransactionId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("AcmeCorporation.API.Data.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(255);

                    b.Property<int?>("ContactNumber");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired();

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired();

                    b.Property<int>("Role");

                    b.Property<string>("Username")
                        .HasMaxLength(50);

                    b.HasKey("UserId");

                    b.HasIndex("EmailAddress")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 102,
                            EmailAddress = "johnwick@gmail.com",
                            PasswordHash = new byte[] { 71, 161, 160, 10, 49, 188, 255, 143, 201, 92, 207, 70, 231, 236, 57, 186, 177, 18, 206, 209, 208, 94, 225, 153, 3, 98, 102, 235, 165, 86, 94, 178, 138, 208, 36, 148, 61, 205, 167, 253, 208, 86, 213, 74, 224, 40, 226, 230, 121, 132, 132, 137, 99, 247, 220, 165, 183, 175, 62, 93, 78, 194, 122, 181 },
                            PasswordSalt = new byte[] { 191, 63, 116, 252, 2, 200, 22, 208, 144, 255, 175, 244, 46, 96, 156, 110, 152, 245, 167, 176, 90, 19, 17, 144, 94, 123, 132, 28, 197, 238, 135, 233, 20, 255, 86, 106, 181, 214, 117, 11, 250, 64, 81, 7, 211, 113, 243, 46, 18, 1, 173, 196, 52, 117, 213, 126, 102, 174, 181, 134, 210, 13, 44, 14, 82, 214, 50, 157, 100, 92, 141, 67, 37, 24, 238, 98, 140, 229, 10, 78, 214, 175, 84, 248, 115, 132, 163, 42, 94, 136, 200, 66, 216, 208, 253, 3, 141, 130, 249, 22, 236, 254, 203, 20, 115, 189, 56, 157, 151, 137, 84, 165, 248, 157, 247, 95, 22, 18, 81, 47, 253, 237, 162, 11, 192, 89, 192, 109 },
                            Role = 1,
                            Username = "John Wick"
                        },
                        new
                        {
                            UserId = 100,
                            EmailAddress = "paterpark@gmail.com",
                            PasswordHash = new byte[] { 71, 161, 160, 10, 49, 188, 255, 143, 201, 92, 207, 70, 231, 236, 57, 186, 177, 18, 206, 209, 208, 94, 225, 153, 3, 98, 102, 235, 165, 86, 94, 178, 138, 208, 36, 148, 61, 205, 167, 253, 208, 86, 213, 74, 224, 40, 226, 230, 121, 132, 132, 137, 99, 247, 220, 165, 183, 175, 62, 93, 78, 194, 122, 181 },
                            PasswordSalt = new byte[] { 191, 63, 116, 252, 2, 200, 22, 208, 144, 255, 175, 244, 46, 96, 156, 110, 152, 245, 167, 176, 90, 19, 17, 144, 94, 123, 132, 28, 197, 238, 135, 233, 20, 255, 86, 106, 181, 214, 117, 11, 250, 64, 81, 7, 211, 113, 243, 46, 18, 1, 173, 196, 52, 117, 213, 126, 102, 174, 181, 134, 210, 13, 44, 14, 82, 214, 50, 157, 100, 92, 141, 67, 37, 24, 238, 98, 140, 229, 10, 78, 214, 175, 84, 248, 115, 132, 163, 42, 94, 136, 200, 66, 216, 208, 253, 3, 141, 130, 249, 22, 236, 254, 203, 20, 115, 189, 56, 157, 151, 137, 84, 165, 248, 157, 247, 95, 22, 18, 81, 47, 253, 237, 162, 11, 192, 89, 192, 109 },
                            Role = 2,
                            Username = "Peter Park"
                        },
                        new
                        {
                            UserId = 101,
                            EmailAddress = "jason@gmail.com",
                            PasswordHash = new byte[] { 71, 161, 160, 10, 49, 188, 255, 143, 201, 92, 207, 70, 231, 236, 57, 186, 177, 18, 206, 209, 208, 94, 225, 153, 3, 98, 102, 235, 165, 86, 94, 178, 138, 208, 36, 148, 61, 205, 167, 253, 208, 86, 213, 74, 224, 40, 226, 230, 121, 132, 132, 137, 99, 247, 220, 165, 183, 175, 62, 93, 78, 194, 122, 181 },
                            PasswordSalt = new byte[] { 191, 63, 116, 252, 2, 200, 22, 208, 144, 255, 175, 244, 46, 96, 156, 110, 152, 245, 167, 176, 90, 19, 17, 144, 94, 123, 132, 28, 197, 238, 135, 233, 20, 255, 86, 106, 181, 214, 117, 11, 250, 64, 81, 7, 211, 113, 243, 46, 18, 1, 173, 196, 52, 117, 213, 126, 102, 174, 181, 134, 210, 13, 44, 14, 82, 214, 50, 157, 100, 92, 141, 67, 37, 24, 238, 98, 140, 229, 10, 78, 214, 175, 84, 248, 115, 132, 163, 42, 94, 136, 200, 66, 216, 208, 253, 3, 141, 130, 249, 22, 236, 254, 203, 20, 115, 189, 56, 157, 151, 137, 84, 165, 248, 157, 247, 95, 22, 18, 81, 47, 253, 237, 162, 11, 192, 89, 192, 109 },
                            Role = 2,
                            Username = "Jason Statham"
                        });
                });

            modelBuilder.Entity("AcmeCorporation.API.Data.Models.Photo", b =>
                {
                    b.HasOne("AcmeCorporation.API.Data.Models.Product")
                        .WithMany("Photos")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("AcmeCorporation.API.Data.Models.Transaction", b =>
                {
                    b.HasOne("AcmeCorporation.API.Data.Models.Product", "Product")
                        .WithMany("Transactions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AcmeCorporation.API.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
