// <auto-generated />
using System;
using AcmeCorporation.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AcmeCorporation.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201228200754_AddedProductIdForPhotoTable")]
    partial class AddedProductIdForPhotoTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AcmeCorporation.API.Data.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("AcmeCorporation.API.Data.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndingTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("InitialBid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("StartingTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("AcmeCorporation.API.Data.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId");

                    b.HasKey("TransactionId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("AcmeCorporation.API.Data.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(255);

                    b.Property<int?>("ContactNumber");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired();

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired();

                    b.Property<int>("Role");

                    b.Property<string>("Username")
                        .HasMaxLength(50);

                    b.HasKey("UserId");

                    b.HasIndex("EmailAddress")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 102,
                            EmailAddress = "johnwick@gmail.com",
                            PasswordHash = new byte[] { 165, 80, 236, 182, 230, 111, 122, 177, 15, 237, 143, 255, 251, 118, 157, 85, 150, 46, 198, 192, 200, 137, 122, 118, 37, 9, 210, 52, 38, 110, 227, 18, 253, 169, 221, 159, 118, 41, 57, 30, 127, 72, 202, 239, 189, 8, 172, 52, 26, 248, 78, 121, 238, 134, 52, 99, 173, 122, 144, 160, 121, 177, 56, 203 },
                            PasswordSalt = new byte[] { 221, 189, 117, 219, 227, 221, 166, 197, 128, 136, 147, 165, 124, 245, 243, 42, 233, 253, 150, 60, 42, 61, 154, 253, 255, 30, 228, 20, 156, 152, 22, 12, 63, 248, 138, 26, 109, 30, 34, 223, 68, 141, 239, 71, 254, 225, 224, 146, 112, 133, 2, 106, 14, 94, 211, 209, 188, 90, 121, 146, 63, 146, 26, 224, 252, 14, 232, 184, 140, 87, 115, 53, 246, 226, 31, 158, 239, 69, 242, 225, 240, 250, 118, 178, 84, 222, 226, 179, 213, 196, 98, 97, 217, 188, 27, 10, 57, 238, 250, 252, 6, 201, 99, 68, 176, 254, 39, 162, 27, 152, 94, 152, 49, 208, 235, 232, 28, 114, 187, 186, 185, 84, 16, 72, 99, 233, 241, 198 },
                            Role = 1,
                            Username = "John Wick"
                        },
                        new
                        {
                            UserId = 101,
                            EmailAddress = "paterpark@gmail.com",
                            PasswordHash = new byte[] { 165, 80, 236, 182, 230, 111, 122, 177, 15, 237, 143, 255, 251, 118, 157, 85, 150, 46, 198, 192, 200, 137, 122, 118, 37, 9, 210, 52, 38, 110, 227, 18, 253, 169, 221, 159, 118, 41, 57, 30, 127, 72, 202, 239, 189, 8, 172, 52, 26, 248, 78, 121, 238, 134, 52, 99, 173, 122, 144, 160, 121, 177, 56, 203 },
                            PasswordSalt = new byte[] { 221, 189, 117, 219, 227, 221, 166, 197, 128, 136, 147, 165, 124, 245, 243, 42, 233, 253, 150, 60, 42, 61, 154, 253, 255, 30, 228, 20, 156, 152, 22, 12, 63, 248, 138, 26, 109, 30, 34, 223, 68, 141, 239, 71, 254, 225, 224, 146, 112, 133, 2, 106, 14, 94, 211, 209, 188, 90, 121, 146, 63, 146, 26, 224, 252, 14, 232, 184, 140, 87, 115, 53, 246, 226, 31, 158, 239, 69, 242, 225, 240, 250, 118, 178, 84, 222, 226, 179, 213, 196, 98, 97, 217, 188, 27, 10, 57, 238, 250, 252, 6, 201, 99, 68, 176, 254, 39, 162, 27, 152, 94, 152, 49, 208, 235, 232, 28, 114, 187, 186, 185, 84, 16, 72, 99, 233, 241, 198 },
                            Role = 2,
                            Username = "Peter Park"
                        },
                        new
                        {
                            UserId = 100,
                            EmailAddress = "jason@gmail.com",
                            PasswordHash = new byte[] { 165, 80, 236, 182, 230, 111, 122, 177, 15, 237, 143, 255, 251, 118, 157, 85, 150, 46, 198, 192, 200, 137, 122, 118, 37, 9, 210, 52, 38, 110, 227, 18, 253, 169, 221, 159, 118, 41, 57, 30, 127, 72, 202, 239, 189, 8, 172, 52, 26, 248, 78, 121, 238, 134, 52, 99, 173, 122, 144, 160, 121, 177, 56, 203 },
                            PasswordSalt = new byte[] { 221, 189, 117, 219, 227, 221, 166, 197, 128, 136, 147, 165, 124, 245, 243, 42, 233, 253, 150, 60, 42, 61, 154, 253, 255, 30, 228, 20, 156, 152, 22, 12, 63, 248, 138, 26, 109, 30, 34, 223, 68, 141, 239, 71, 254, 225, 224, 146, 112, 133, 2, 106, 14, 94, 211, 209, 188, 90, 121, 146, 63, 146, 26, 224, 252, 14, 232, 184, 140, 87, 115, 53, 246, 226, 31, 158, 239, 69, 242, 225, 240, 250, 118, 178, 84, 222, 226, 179, 213, 196, 98, 97, 217, 188, 27, 10, 57, 238, 250, 252, 6, 201, 99, 68, 176, 254, 39, 162, 27, 152, 94, 152, 49, 208, 235, 232, 28, 114, 187, 186, 185, 84, 16, 72, 99, 233, 241, 198 },
                            Role = 2,
                            Username = "Jason Statham"
                        });
                });

            modelBuilder.Entity("AcmeCorporation.API.Data.Models.Photo", b =>
                {
                    b.HasOne("AcmeCorporation.API.Data.Models.Product", "Product")
                        .WithMany("Photos")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AcmeCorporation.API.Data.Models.Transaction", b =>
                {
                    b.HasOne("AcmeCorporation.API.Data.Models.Product", "Product")
                        .WithMany("Transactions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AcmeCorporation.API.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
